AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'TiHouseworkServer

  Sample SAM Template for TiHouseworkServer

  '
Parameters:
  TableName:
    Type: String
    Default: simplechat_connections
    Description: (Required) The name of the new DynamoDB to store connection identifiers
      for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: Required. Can be characters and underscore only. No numbers
      or special characters allowed.
Globals:
  Function:
    Timeout: 3
    Runtime: nodejs14.x
    Environment:
      Variables:
        USER_TABLE: user
Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Auth:
        DefaultAuthorizer: MyLambdaTokenAuthorizer
        Authorizers:
          MyLambdaTokenAuthorizer:
            FunctionArn:
              Fn::GetAtt:
              - MyAuthFunction
              - Arn
  UserTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: email
        Type: String
      TableName: user
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: connectionId
        AttributeType: S
      KeySchema:
      - AttributeName: connectionId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
      TableName:
        Ref: TableName
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: LoginFunction
      Handler: app.login
      Events:
        Login:
          Type: Api
          Properties:
            Path: /user/login
            Method: post
            RestApiId:
              Ref: MyApi
            Auth:
              Authorizer: NONE
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserTable
  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: RegisterFunction
      Handler: app.register
      Events:
        Register:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApi
            Path: /user/register
            Method: post
            Auth:
              Authorizer: NONE
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserTable
  HelloFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: HelloFunction
      Handler: app.hello
      Events:
        Hello:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApi
            Path: /hello
            Method: get
  MyAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: MyAuthFunction
      Handler: app.auth
Outputs:
  APIEndPoint:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  RegisterFunction:
    Description: Register Lambda Function ARN
    Value:
      Fn::GetAtt:
      - RegisterFunction
      - Arn
  RegisterFunctionRole:
    Description: Implicit IAM Role created for Registerfunction
    Value:
      Fn::GetAtt:
      - RegisterFunctionRole
      - Arn
