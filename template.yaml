AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  TiHouseworkServer

  Sample SAM Template for TiHouseworkServer
  
Parameters:
  WebSocketTableName:
    Type: String
    Default: 'chat_connections'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
    
Globals:
  Function:
    Timeout: 3
    Runtime: nodejs14.x
    Environment:
      Variables:
        USER_TABLE: user

Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Auth:
        DefaultAuthorizer: MyLambdaTokenAuthorizer
        Authorizers:
          MyLambdaTokenAuthorizer:
            FunctionArn: !GetAtt MyAuthFunction.Arn
    
  # DynamoDB Tables
  UserTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey: 
          Name: email
          Type: String
      TableName: user
  
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "connectionId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "connectionId"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref WebSocketTableName

  # API Functions   
  LoginFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: src/main/
      Handler: app.login
      Events:
        Login:
          Type: Api 
          Properties:
            Path: /user/login
            Method: post
            RestApiId : !Ref MyApi
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable

  RegisterFunction:
      Type: AWS::Serverless::Function 
      Properties:
        CodeUri: src/main/
        Handler: app.register 
        Events:
          Register:
            Type: Api 
            Properties:
              RestApiId : !Ref MyApi
              Path: /user/register
              Method: post
              Auth:
                Authorizer: NONE
        Policies:
          - DynamoDBCrudPolicy:
              TableName: !Ref UserTable

  HelloFunction:
      Type: AWS::Serverless::Function 
      Properties:
        CodeUri: src/main/
        Handler: app.hello
        Events:
          Hello:
            Type: Api 
            Properties:
              RestApiId : !Ref MyApi
              Path: /hello
              Method: get


  # Auth Functions  
  MyAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/auth/
      Handler: app.auth


  # Websocket
  SimpleChatWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SimpleChatWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendInteg

  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - SendRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref SimpleChatWebSocket

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref SimpleChatWebSocket

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/websocket/onconnect/
      Handler: app.handler
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref WebSocketTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketTableName

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/websocket/ondisconnect/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs14.x
      Environment:
        Variables:
          TABLE_NAME: !Ref WebSocketTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref WebSocketTableName

  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com   

  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/websocket/onmessage/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs14.x
      Environment:
        Variables:
          TABLE_NAME: !Ref WebSocketTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref WebSocketTableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'
  
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  APIEndPoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  RegisterFunctionARN:
    Description: "Register Lambda Function ARN"
    Value: !GetAtt RegisterFunction.Arn
  RegisterFunctionRole:
    Description: "Implicit IAM Role created for Registerfunction"
    Value: !GetAtt RegisterFunctionRole.Arn
  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref SimpleChatWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]
  OnConnectFunctionARN:
    Description: "OnConnect Lambda Function ARN"
    Value: !GetAtt OnConnectFunction.Arn
  OnDisconnectFunctionArn:
    Description: "OnDisconnect function ARN"
    Value: !GetAtt OnDisconnectFunction.Arn